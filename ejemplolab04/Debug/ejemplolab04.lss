
ejemplolab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4e  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000803  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000554  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00002101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  88:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Master_Init>:
 */ 
#include "I2C.h"
//************************************************
// Funcion para inicializar I2C Maestro
//************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler){
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	8b 01       	movw	r16, r22
  98:	9c 01       	movw	r18, r24
  9a:	c4 2f       	mov	r28, r20
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de i2c como entradas
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 7c       	andi	r24, 0xCF	; 207
  a0:	87 b9       	out	0x07, r24	; 7
	
	switch(Prescaler){
  a2:	44 30       	cpi	r20, 0x04	; 4
  a4:	51 f0       	breq	.+20     	; 0xba <I2C_Master_Init+0x2a>
  a6:	40 31       	cpi	r20, 0x10	; 16
  a8:	89 f0       	breq	.+34     	; 0xcc <I2C_Master_Init+0x3c>
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	b9 f4       	brne	.+46     	; 0xdc <I2C_Master_Init+0x4c>
		case 1:
			TWSR &= ~((1<<TWPS1)|(1<<TWPS0));
  ae:	e9 eb       	ldi	r30, 0xB9	; 185
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8c 7f       	andi	r24, 0xFC	; 252
  b6:	80 83       	st	Z, r24
		break;
  b8:	11 c0       	rjmp	.+34     	; 0xdc <I2C_Master_Init+0x4c>
		case 4:
			TWSR &= ~(1<<TWPS1);
  ba:	e9 eb       	ldi	r30, 0xB9	; 185
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
		break;
  ca:	08 c0       	rjmp	.+16     	; 0xdc <I2C_Master_Init+0x4c>
		case 16:
			TWSR &= ~ (1<<TWPS0);
  cc:	e9 eb       	ldi	r30, 0xB9	; 185
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	80 83       	st	Z, r24
			TWSR |= (1<<TWPS0);
  d6:	80 81       	ld	r24, Z
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU/SCL_Clock)-16)/(2*Prescaler); /*must be > 10 for stable operation */
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	74 e2       	ldi	r23, 0x24	; 36
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a9 01       	movw	r20, r18
  e6:	98 01       	movw	r18, r16
  e8:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodsi4>
  ec:	ca 01       	movw	r24, r20
  ee:	b9 01       	movw	r22, r18
  f0:	60 51       	subi	r22, 0x10	; 16
  f2:	71 09       	sbc	r23, r1
  f4:	81 09       	sbc	r24, r1
  f6:	91 09       	sbc	r25, r1
  f8:	4c 2f       	mov	r20, r28
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	9a 01       	movw	r18, r20
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	03 2e       	mov	r0, r19
 104:	00 0c       	add	r0, r0
 106:	44 0b       	sbc	r20, r20
 108:	55 0b       	sbc	r21, r21
 10a:	0e 94 3a 01 	call	0x274	; 0x274 <__udivmodsi4>
 10e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 112:	ec eb       	ldi	r30, 0xBC	; 188
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	80 83       	st	Z, r24
}
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <I2C_Master_Start>:
//************************************************
// Funcion de inicio de la comunicacion I2C
//************************************************
void I2C_Master_Start(void){
	uint8_t estado;
	TWCR = (1<< TWINT) | (1<<TWSTA) | (1<<TWEN); 
 124:	84 ea       	ldi	r24, 0xA4	; 164
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<< TWINT))); //Espera a que termine la flag TWINT
 12a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12e:	88 23       	and	r24, r24
 130:	e4 f7       	brge	.-8      	; 0x12a <I2C_Master_Start+0x6>
	if ((estado != 0x08) || (estado != 0x10)) {
		return 1;
	}else{
		return estado;
	}*/
}
 132:	08 95       	ret

00000134 <I2C_Master_Stop>:
//************************************************
//Funcion de parada de la comunicacion I2C
//************************************************
void I2C_Master_Stop(void){
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO); //Inicia el envio secuencia parada STOP
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13a:	08 95       	ret

0000013c <I2C_Master_Write>:
//el dato
//************************************************
uint8_t I2C_Master_Write(uint8_t dato){
	uint8_t estado;
	
	TWDR = dato; //Cargar el dato
 13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
 140:	84 e8       	ldi	r24, 0x84	; 132
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while(!(TWCR&(1<<TWINT))); //Espera al flag TWINT
 146:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14a:	88 23       	and	r24, r24
 14c:	e4 f7       	brge	.-8      	; 0x146 <I2C_Master_Write+0xa>
	estado = TWSR & 0xF8; //verificar estado
 14e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 152:	88 7f       	andi	r24, 0xF8	; 248
	//verificar si se transmitio una SLA + W con AFK, SLA + R con ACK, o un Dato con ACK
	if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 154:	88 31       	cpi	r24, 0x18	; 24
 156:	31 f0       	breq	.+12     	; 0x164 <I2C_Master_Write+0x28>
 158:	88 32       	cpi	r24, 0x28	; 40
 15a:	31 f0       	breq	.+12     	; 0x168 <I2C_Master_Write+0x2c>
 15c:	80 34       	cpi	r24, 0x40	; 64
 15e:	29 f4       	brne	.+10     	; 0x16a <I2C_Master_Write+0x2e>
		return 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	08 95       	ret
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
 168:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return estado;
	}
}
 16a:	08 95       	ret

0000016c <refreshPORT>:
	DDRB |= (1<<DDB5);
	
}

void refreshPORT(uint8_t valor){
	if (valor & 0b10000000){
 16c:	88 23       	and	r24, r24
 16e:	24 f4       	brge	.+8      	; 0x178 <refreshPORT+0xc>
		PORTD |= (1<<PORTD5);
 170:	9b b1       	in	r25, 0x0b	; 11
 172:	90 62       	ori	r25, 0x20	; 32
 174:	9b b9       	out	0x0b, r25	; 11
 176:	03 c0       	rjmp	.+6      	; 0x17e <refreshPORT+0x12>
	}else{
	PORTD &= ~(1<<PORTD5);
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	9f 7d       	andi	r25, 0xDF	; 223
 17c:	9b b9       	out	0x0b, r25	; 11
	}
	if (valor & 0b01000000){
 17e:	86 ff       	sbrs	r24, 6
 180:	04 c0       	rjmp	.+8      	; 0x18a <refreshPORT+0x1e>
		PORTD |= (1<<PORTD4);
 182:	9b b1       	in	r25, 0x0b	; 11
 184:	90 61       	ori	r25, 0x10	; 16
 186:	9b b9       	out	0x0b, r25	; 11
 188:	03 c0       	rjmp	.+6      	; 0x190 <refreshPORT+0x24>
		}else{
		PORTD &= ~(1<<PORTD4);
 18a:	9b b1       	in	r25, 0x0b	; 11
 18c:	9f 7e       	andi	r25, 0xEF	; 239
 18e:	9b b9       	out	0x0b, r25	; 11
	}
	if (valor & 0b00100000){
 190:	85 ff       	sbrs	r24, 5
 192:	04 c0       	rjmp	.+8      	; 0x19c <refreshPORT+0x30>
		PORTD |= (1<<PORTD3);
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	98 60       	ori	r25, 0x08	; 8
 198:	9b b9       	out	0x0b, r25	; 11
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <refreshPORT+0x36>
		}else{
		PORTD &= ~(1<<PORTD3);
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	97 7f       	andi	r25, 0xF7	; 247
 1a0:	9b b9       	out	0x0b, r25	; 11
	}
	if (valor & 0b00010000){
 1a2:	84 ff       	sbrs	r24, 4
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <refreshPORT+0x42>
		PORTD |= (1<<PORTD2);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	08 95       	ret
		}else{
		PORTD &= ~(1<<PORTD2);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	08 95       	ret

000001b6 <initPorts>:
	}
}

void initPorts(void){
	//SALIDAS
	DDRC |= (1<< DDC0)|(1<< DDC1)|(1<<DDC2)|(1<< DDC3);
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	8f 60       	ori	r24, 0x0F	; 15
 1ba:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<< DDD2)|(1<< DDD3)|(1<<DDD4)|(1<< DDD5);
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	8c 63       	ori	r24, 0x3C	; 60
 1c0:	8a b9       	out	0x0a, r24	; 10
	refreshPORT(0);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b6 00 	call	0x16c	; 0x16c <refreshPORT>
	DDRB |= (1<<DDB5);
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	84 b9       	out	0x04, r24	; 4
 1ce:	08 95       	ret

000001d0 <main>:
void refreshPORT(uint8_t valor);


int main(void)
{
	I2C_Master_Init(100000,1);//Inicializar como master Fscl 100kHz, prescaler 1
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	60 ea       	ldi	r22, 0xA0	; 160
 1d4:	76 e8       	ldi	r23, 0x86	; 134
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Master_Init>
	initPorts();
 1de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initPorts>
	while (1)
	{
		PORTB |=(1<<PORTB5);
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	85 b9       	out	0x05, r24	; 5
		
		I2C_Master_Start();
 1e8:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Master_Start>
		//Escritura
		bufferI2C = slave1 << 1 & 0b11111110;
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferI2C>
		
		temp = I2C_Master_Write(bufferI2C);
 1f2:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_Master_Write>
 1f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp>
		if (temp != 1){
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	11 f0       	breq	.+4      	; 0x202 <main+0x32>
			I2C_Master_Stop();
 1fe:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Master_Stop>
		}
		I2C_Master_Write('R');
 202:	82 e5       	ldi	r24, 0x52	; 82
 204:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_Master_Write>
		I2C_Master_Stop();
 208:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Master_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	2f e9       	ldi	r18, 0x9F	; 159
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x42>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x4c>
 21c:	00 00       	nop
		_delay_ms(500);
		
		PORTB &=~(1<<PORTB5);
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	85 b9       	out	0x05, r24	; 5
		I2C_Master_Start();
 224:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Master_Start>
		// Lectura
		bufferI2C = slave1 << 1 | 0b00000001;
 228:	81 e6       	ldi	r24, 0x61	; 97
 22a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bufferI2C>
		
		temp = I2C_Master_Write(bufferI2C);
 22e:	0e 94 9e 00 	call	0x13c	; 0x13c <I2C_Master_Write>
 232:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp>
		if (temp !=1){
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	11 f0       	breq	.+4      	; 0x23e <main+0x6e>
			I2C_Master_Stop();
 23a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Master_Stop>
		}
		
		TWCR = (1<<TWINT)|(1<<TWEN);
 23e:	84 e8       	ldi	r24, 0x84	; 132
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));
 244:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 248:	88 23       	and	r24, r24
 24a:	e4 f7       	brge	.-8      	; 0x244 <main+0x74>
		
		valorI2C = TWDR;
 24c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		I2C_Master_Stop();
 254:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Master_Stop>
		
		refreshPORT(valorI2C);
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	0e 94 b6 00 	call	0x16c	; 0x16c <refreshPORT>
 260:	2f e9       	ldi	r18, 0x9F	; 159
 262:	86 e8       	ldi	r24, 0x86	; 134
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x96>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xa0>
 270:	00 00       	nop
 272:	b7 cf       	rjmp	.-146    	; 0x1e2 <main+0x12>

00000274 <__udivmodsi4>:
 274:	a1 e2       	ldi	r26, 0x21	; 33
 276:	1a 2e       	mov	r1, r26
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	fd 01       	movw	r30, r26
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__udivmodsi4_ep>

00000280 <__udivmodsi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	ee 1f       	adc	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	a2 17       	cp	r26, r18
 28a:	b3 07       	cpc	r27, r19
 28c:	e4 07       	cpc	r30, r20
 28e:	f5 07       	cpc	r31, r21
 290:	20 f0       	brcs	.+8      	; 0x29a <__udivmodsi4_ep>
 292:	a2 1b       	sub	r26, r18
 294:	b3 0b       	sbc	r27, r19
 296:	e4 0b       	sbc	r30, r20
 298:	f5 0b       	sbc	r31, r21

0000029a <__udivmodsi4_ep>:
 29a:	66 1f       	adc	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a 94       	dec	r1
 2a4:	69 f7       	brne	.-38     	; 0x280 <__udivmodsi4_loop>
 2a6:	60 95       	com	r22
 2a8:	70 95       	com	r23
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	bd 01       	movw	r22, r26
 2b4:	cf 01       	movw	r24, r30
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
